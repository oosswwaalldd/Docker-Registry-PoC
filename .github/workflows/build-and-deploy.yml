# This is a basic workflow to help you get started with Actions

name: First Github Actions Ever!

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
#     paths-ignore: 
#       - ".github/workflows/build-and-deploy.yml"
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    env:
      VERSION: 0.0.1
      WEBSERVER_DOCKERFILE: prod.Dockerfile
      WEBSERVER_IMAGE: docker.pkg.github.com/oosswwaalldd/docker-registry-poc/docker-poc-webserver
      REVERSE_DOCKERFILE: prod.Dockerfile
      REVERSE_IMAGE: docker.pkg.github.com/oosswwaalldd/docker-registry-poc/docker-poc-reverse
    steps: 
      - name: Get current app version
        id: get_version
        uses: martinbeentjes/npm-get-version-action@v1.0.0
      - name: Test version 
        run: |
          echo ${{ steps.get_version.outputs.current-version }}
          exit 1
      - name: Check out master branch  
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build Webserver Source Code
        working-directory: ./webserver
        run: yarn && yarn run build
      - name: Build Webserver Image
        working-directory: ./webserver
        run: docker build --file $WEBSERVER_DOCKERFILE --tag $WEBSERVER_IMAGE:$VERSION .
      - name: Build Reverse Image
        working-directory: ./reverse
        run: docker build --file $REVERSE_DOCKERFILE --tag $REVERSE_IMAGE:$VERSION .
      - name: Log into GitHub Registry
        run: docker login docker.pkg.github.com -u ${{ secrets.DOCKER_REGISTRY_USER }} --password ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - name: Push Images to Docker Registry
        run: |
          docker push $REVERSE_IMAGE:$VERSION
          docker push $WEBSERVER_IMAGE:$VERSION  
  deploy:
    # Depends on
    needs: [build]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:       
    # Connects to test server and run commands    
    - name: SSH Deploy Commands
      uses: appleboy/ssh-action@v0.0.7
      env:
        VERSION: 0.0.1
        PROJECT_FOLDER: /home/simpi/deploy
        WEBSERVER_ENV_FILE: .webserver.env
        WEBSERVER_CONTAINER_NAME: docker-poc-webserver
        WEBSERVER_IMAGE: docker.pkg.github.com/oosswwaalldd/docker-registry-poc/docker-poc-webserver
        REVERSE_CONTAINER_NAME: docker-poc-reverse
        REVERSE_ENV_FILE: .reverse.env
        REVERSE_IMAGE: docker.pkg.github.com/oosswwaalldd/docker-registry-poc/docker-poc-reverse
        NETWORK_NAME: docker-registry-poc
        LOG_DRIVER: json-file
        LOG_FILES: 5
        LOG_SIZE: 10m
      with:
        host: ${{ secrets.STAGE_HOST }}
        username: ${{ secrets.STAGE_SSH_USER }}
        key: ${{ secrets.STAGE_SSH_KEY }}
        port: ${{ secrets.STAGE_SSH_PORT }}
        envs: VERSION,WEBSERVER_ENV_FILE,WEBSERVER_CONTAINER_NAME,WEBSERVER_IMAGE,REVERSE_CONTAINER_NAME,REVERSE_ENV_FILE,REVERSE_IMAGE,NETWORK_NAME,LOG_DRIVER,LOG_FILES,LOG_SIZE,PROJECT_FOLDER
        script: |
          echo "Project Version: $VERSION"
          echo "Changing to project folder $PROJECT_FOLDER..."
          cd $PROJECT_FOLDER
          
          echo "Stopping and removing $WEBSERVER_CONTAINER_NAME..."
          docker stop $WEBSERVER_CONTAINER_NAME && docker rm $WEBSERVER_CONTAINER_NAME
          echo "Stopping and removing $REVERSE_CONTAINER_NAME..."
          docker stop $REVERSE_CONTAINER_NAME && docker rm $REVERSE_CONTAINER_NAME
          echo "Removing network $NETWORK_NAME..."
          docker network remove $NETWORK_NAME
          
          echo "Pulling images..."
          docker pull $WEBSERVER_IMAGE:$VERSION
          docker pull $REVERSE_IMAGE:$VERSION
          
          echo "Creating network $NETWORK_NAME..."
          docker network create $NETWORK_NAME --driver bridge
          
          echo "Running container $WEBSERVER_CONTAINER_NAME"
          docker run \
          --env-file=$WEBSERVER_ENV_FILE \
          --detach \
          --network="$NETWORK_NAME" \
          --name $WEBSERVER_CONTAINER_NAME \
          --log-driver $LOG_DRIVER \
          --log-opt max-file=$LOG_FILES \
          --log-opt max-size=$LOG_SIZE \
          $WEBSERVER_IMAGE:$VERSION
          
          echo "Running container $REVERSE_CONTAINER_NAME"
          docker run \
          --env-file=$REVERSE_ENV_FILE \
          --detach \
          --publish 80:80 \
          --publish 443:443 \
          --network="$NETWORK_NAME" \
          --name $REVERSE_CONTAINER_NAME \
          --log-driver $LOG_DRIVER \
          --log-opt max-file=$LOG_FILES \
          --log-opt max-size=$LOG_SIZE \
          $REVERSE_IMAGE:$VERSION
